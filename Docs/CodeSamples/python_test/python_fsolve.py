import numpy as np
from scipy.optimize import fsolve
import matplotlib.pyplot as plt
def main():
#    x0 = [1., 1., 1., 1., 1., 1., 1.]
    x0 = [1., 1., 1., 1., 1., 1., 1.]
    sol = fsolve(f2, x0)
#    plt.plot([0, 1./5., 2./5., 3./ 5., 4./5., 1.], sol)
    plt.plot([0, 1./5., 2./5.,3./5.,4./5., 1.], sol[:6])
    print np.linalg.norm(f2(sol))
#    x = np.linspace(0, 1)
#    plt.plot(x, -f1(x))
    plt.show()
    print sol
    
def f(alpha):
    out = [alpha[0] - 0]   
    #out.append(0.5 * 0.250000 * (((alpha[0] * ((1.0/0.250000))) + (alpha[1] * ((-1.0/0.250000)))) * (((-1.0/0.250000))) - 0.000000 * ((0)) + ((alpha[0] * ((1.0/0.250000))) + (alpha[1] * ((-1.0/0.250000)))) * (((-1.0/0.250000))) - 0.250000 * ((1))) + 0.5 * 0.250000 * (((alpha[1] * ((1.0/0.250000))) + (alpha[2] * ((-1.0/0.250000)))) * (((1.0/0.250000))) - 0.250000 * ((1)) + ((alpha[1] * ((1.0/0.250000))) + (alpha[2] * ((-1.0/0.250000)))) * (((1.0/0.250000))) - 0.500000 * ((0))) + 0.5 * 0.250000 * (0 + 0) + 0.5 * 0.250000 * (0 + 0))
    #out.append(0.5 * 0.250000 * (0 + 0) + 0.5 * 0.250000 * (((alpha[1] * ((1.0/0.250000))) + (alpha[2] * ((-1.0/0.250000)))) * (((-1.0/0.250000))) - 0.250000 * ((0)) + ((alpha[1] * ((1.0/0.250000))) + (alpha[2] * ((-1.0/0.250000)))) * (((-1.0/0.250000))) - 0.500000 * ((1))) + 0.5 * 0.250000 * (((alpha[2] * ((1.0/0.250000))) + (alpha[3] * ((-1.0/0.250000)))) * (((1.0/0.250000))) - 0.500000 * ((1)) + ((alpha[2] * ((1.0/0.250000))) + (alpha[3] * ((-1.0/0.250000)))) * (((1.0/0.250000))) - 0.750000 * ((0))) + 0.5 * 0.250000 * (0 + 0))
    #out.append(0.5 * 0.250000 * (0 + 0) + 0.5 * 0.250000 * (0 + 0) + 0.5 * 0.250000 * (((alpha[2] * ((1.0/0.250000))) + (alpha[3] * ((-1.0/0.250000)))) * (((-1.0/0.250000))) - 0.500000 * ((0)) + ((alpha[2] * ((1.0/0.250000))) + (alpha[3] * ((-1.0/0.250000)))) * (((-1.0/0.250000))) - 0.750000 * ((1))) + 0.5 * 0.250000 * (((alpha[3] * ((1.0/0.250000))) + (alpha[4] * ((-1.0/0.250000)))) * (((1.0/0.250000))) - 0.750000 * ((1)) + ((alpha[3] * ((1.0/0.250000))) + (alpha[4] * ((-1.0/0.250000)))) * (((1.0/0.250000))) - 1.000000 * ((0))))  
 
    out.append(0.5 * 0.250000 * (((alpha[0] * ((1.0/0.250000))) + (alpha[1] * ((-1.0/0.250000)))) * (((-1.0/0.250000))) - 0.000000 * ((0)) + ((alpha[0] * ((1.0/0.250000))) + (alpha[1] * ((-1.0/0.250000)))) * (((-1.0/0.250000))) - 0.250000 * ((1))) + 0.5 * 0.250000 * (((alpha[1] * ((1.0/0.250000))) + (alpha[2] * ((-1.0/0.250000)))) * (((1.0/0.250000))) - 0.250000 * ((1)) + ((alpha[1] * ((1.0/0.250000))) + (alpha[2] * ((-1.0/0.250000)))) * (((1.0/0.250000))) - 0.500000 * ((0))) + 0.5 * 0.250000 * (0 + 0) + 0.5 * 0.250000 * (0 + 0))
    out.append(0.5 * 0.250000 * (0 + 0) + 0.5 * 0.250000 * (((alpha[1] * ((1.0/0.250000))) + (alpha[2] * ((-1.0/0.250000)))) * (((-1.0/0.250000))) - 0.250000 * ((0)) + ((alpha[1] * ((1.0/0.250000))) + (alpha[2] * ((-1.0/0.250000)))) * (((-1.0/0.250000))) - 0.500000 * ((1))) + 0.5 * 0.250000 * (((alpha[2] * ((1.0/0.250000))) + (alpha[3] * ((-1.0/0.250000)))) * (((1.0/0.250000))) - 0.500000 * ((1)) + ((alpha[2] * ((1.0/0.250000))) + (alpha[3] * ((-1.0/0.250000)))) * (((1.0/0.250000))) - 0.750000 * ((0))) + 0.5 * 0.250000 * (0 + 0))
    out.append(0.5 * 0.250000 * (0 + 0) + 0.5 * 0.250000 * (0 + 0) + 0.5 * 0.250000 * (((alpha[2] * ((1.0/0.250000))) + (alpha[3] * ((-1.0/0.250000)))) * (((-1.0/0.250000))) - 0.500000 * ((0)) + ((alpha[2] * ((1.0/0.250000))) + (alpha[3] * ((-1.0/0.250000)))) * (((-1.0/0.250000))) - 0.750000 * ((1))) + 0.5 * 0.250000 * (((alpha[3] * ((1.0/0.250000))) + (alpha[4] * ((-1.0/0.250000)))) * (((1.0/0.250000))) - 0.750000 * ((1)) + ((alpha[3] * ((1.0/0.250000))) + (alpha[4] * ((-1.0/0.250000)))) * (((1.0/0.250000))) - 1.000000 * ((0)))) 
                                
 
    out.append(alpha[4] - 0)
    
    return out

def f2(V):
    out = [V[5] - 1.]
    out.append(V[6] -10.)
    #out.append((0.5 * 0.200000 * ((V[0] *(1.0/0.200000) + V[1] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[0] *1 + V[1] *0)*0 + (V[0] *(1.0/0.200000) + V[1] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[0] *0 + V[1] *1)*1) + 0.5 * 0.200000 * ((V[1] *(1.0/0.200000) + V[2] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[1] *1 + V[2] *0)*1 + (V[1] *(1.0/0.200000) + V[2] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[1] *0 + V[2] *1)*0)))
    #out.append((0.5 * 0.200000 * ((V[1] *(1.0/0.200000) + V[2] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[1] *1 + V[2] *0)*0 + (V[1] *(1.0/0.200000) + V[2] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[1] *0 + V[2] *1)*1) + 0.5 * 0.200000 * ((V[2] *(1.0/0.200000) + V[3] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[2] *1 + V[3] *0)*1 + (V[2] *(1.0/0.200000) + V[3] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[2] *0 + V[3] *1)*0)))
    #out.append((0.5 * 0.200000 * ((V[2] *(1.0/0.200000) + V[3] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[2] *1 + V[3] *0)*0 + (V[2] *(1.0/0.200000) + V[3] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[2] *0 + V[3] *1)*1) + 0.5 * 0.200000 * ((V[3] *(1.0/0.200000) + V[4] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[3] *1 + V[4] *0)*1 + (V[3] *(1.0/0.200000) + V[4] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[3] *0 + V[4] *1)*0)))
    #out.append((0.5 * 0.200000 * ((V[3] *(1.0/0.200000) + V[4] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[3] *1 + V[4] *0)*0 + (V[3] *(1.0/0.200000) + V[4] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[3] *0 + V[4] *1)*1) + 0.5 * 0.200000 * ((V[4] *(1.0/0.200000) + V[5] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[4] *1 + V[5] *0)*1 + (V[4] *(1.0/0.200000) + V[5] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[4] *0 + V[5] *1)*0)))

    #out.append(((V[6])*1 + 0.5 * 0.200000 * ((V[0] *(1.0/0.200000) + V[1] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[0] *1 + V[1] *0)*1 \
    #+ (V[0] *(1.0/0.200000) + V[1] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[0] *0 + V[1] *1)*0)))
    #out.append((0.5 * 0.200000 * ((V[0] *(1.0/0.200000) + V[1] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[0] *1 + V[1] *0)*0 + (V[0] *(1.0/0.200000) + V[1] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[0] *0 + V[1] *1)*1) + 0.5 * 0.200000 * ((V[1] *(1.0/0.200000) + V[2] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[1] *1 + V[2] *0)*1 + (V[1] *(1.0/0.200000) + V[2] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[1] *0 + V[2] *1)*0)))
    #out.append((0.5 * 0.200000 * ((V[1] *(1.0/0.200000) + V[2] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[1] *1 + V[2] *0)*0 + (V[1] *(1.0/0.200000) + V[2] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[1] *0 + V[2] *1)*1) + 0.5 * 0.200000 * ((V[2] *(1.0/0.200000) + V[3] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[2] *1 + V[3] *0)*1 + (V[2] *(1.0/0.200000) + V[3] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[2] *0 + V[3] *1)*0)))
    #out.append((0.5 * 0.200000 * ((V[2] *(1.0/0.200000) + V[3] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[2] *1 + V[3] *0)*0 + (V[2] *(1.0/0.200000) + V[3] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[2] *0 + V[3] *1)*1) + 0.5 * 0.200000 * ((V[3] *(1.0/0.200000) + V[4] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[3] *1 + V[4] *0)*1 + (V[3] *(1.0/0.200000) + V[4] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[3] *0 + V[4] *1)*0)))
    #out.append((0.5 * 0.200000 * ((V[3] *(1.0/0.200000) + V[4] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[3] *1 + V[4] *0)*0 + (V[3] *(1.0/0.200000) + V[4] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[3] *0 + V[4] *1)*1) + 0.5 * 0.200000 * ((V[4] *(1.0/0.200000) + V[5] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[4] *1 + V[5] *0)*1 + (V[4] *(1.0/0.200000) + V[5] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[4] *0 + V[5] *1)*0)))

    out.append(((V[6])*1 + 0.5 * 0.200000 * ((V[0] *(1.0/0.200000) + V[1] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[0] *1 + V[1] *0)*1 + (V[0] *(1.0/0.200000) + V[1] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[0] *0 + V[1] *1)*0)))
    out.append((0.5 * 0.200000 * ((V[0] *(1.0/0.200000) + V[1] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[0] *1 + V[1] *0)*0 + (V[0] *(1.0/0.200000) + V[1] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[0] *0 + V[1] *1)*1) + 0.5 * 0.200000 * ((V[1] *(1.0/0.200000) + V[2] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[1] *1 + V[2] *0)*1 + (V[1] *(1.0/0.200000) + V[2] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[1] *0 + V[2] *1)*0)))
    out.append((0.5 * 0.200000 * ((V[1] *(1.0/0.200000) + V[2] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[1] *1 + V[2] *0)*0 + (V[1] *(1.0/0.200000) + V[2] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[1] *0 + V[2] *1)*1) + 0.5 * 0.200000 * ((V[2] *(1.0/0.200000) + V[3] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[2] *1 + V[3] *0)*1 + (V[2] *(1.0/0.200000) + V[3] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[2] *0 + V[3] *1)*0)))
    out.append((0.5 * 0.200000 * ((V[2] *(1.0/0.200000) + V[3] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[2] *1 + V[3] *0)*0 + (V[2] *(1.0/0.200000) + V[3] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[2] *0 + V[3] *1)*1) + 0.5 * 0.200000 * ((V[3] *(1.0/0.200000) + V[4] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[3] *1 + V[4] *0)*1 + (V[3] *(1.0/0.200000) + V[4] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[3] *0 + V[4] *1)*0)))
    out.append((0.5 * 0.200000 * ((V[3] *(1.0/0.200000) + V[4] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[3] *1 + V[4] *0)*0 + (V[3] *(1.0/0.200000) + V[4] *(-1.0/0.200000))*(-1.0/0.200000)+0.001000*(V[3] *0 + V[4] *1)*1) + 0.5 * 0.200000 * ((V[4] *(1.0/0.200000) + V[5] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[4] *1 + V[5] *0)*1 + (V[4] *(1.0/0.200000) + V[5] *(-1.0/0.200000))*(1.0/0.200000)+0.001000*(V[4] *0 + V[5] *1)*0)))    
    return out

def f1(x):
#    return (x**2 - x) * 0.5
    return (x**3 - x) / 6.
main()